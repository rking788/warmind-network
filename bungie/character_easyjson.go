// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package bungie

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson96521307DecodeGithubComRking788WarmindNetworkBungie(in *jlexer.Lexer, out *Character) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "membershipId":
			out.MembershipID = string(in.String())
		case "membershipType":
			out.MembershipType = int(in.Int())
		case "characterId":
			out.CharacterID = string(in.String())
		case "dateLastPlayed":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateLastPlayed).UnmarshalJSON(data))
			}
		case "emblemBackgroundPath":
			out.EmblemBackgroundPath = string(in.String())
		case "raceHash":
			out.RaceHash = uint(in.Uint())
		case "classHash":
			out.ClassHash = uint(in.Uint())
		case "classType":
			out.ClassType = int(in.Int())
		case "light":
			out.Light = int(in.Int())
		case "levelProgression":
			if in.IsNull() {
				in.Skip()
				out.LevelProgression = nil
			} else {
				if out.LevelProgression == nil {
					out.LevelProgression = new(struct {
						Level int `json:"level"`
					})
				}
				easyjson96521307Decode(in, out.LevelProgression)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson96521307EncodeGithubComRking788WarmindNetworkBungie(out *jwriter.Writer, in Character) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MembershipID != "" {
		const prefix string = ",\"membershipId\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MembershipID))
	}
	if in.MembershipType != 0 {
		const prefix string = ",\"membershipType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MembershipType))
	}
	if in.CharacterID != "" {
		const prefix string = ",\"characterId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CharacterID))
	}
	if true {
		const prefix string = ",\"dateLastPlayed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.DateLastPlayed).MarshalJSON())
	}
	if in.EmblemBackgroundPath != "" {
		const prefix string = ",\"emblemBackgroundPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EmblemBackgroundPath))
	}
	if in.RaceHash != 0 {
		const prefix string = ",\"raceHash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.RaceHash))
	}
	if in.ClassHash != 0 {
		const prefix string = ",\"classHash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.ClassHash))
	}
	if in.ClassType != 0 {
		const prefix string = ",\"classType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ClassType))
	}
	if in.Light != 0 {
		const prefix string = ",\"light\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Light))
	}
	if in.LevelProgression != nil {
		const prefix string = ",\"levelProgression\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson96521307Encode(out, *in.LevelProgression)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Character) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson96521307EncodeGithubComRking788WarmindNetworkBungie(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Character) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson96521307EncodeGithubComRking788WarmindNetworkBungie(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Character) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson96521307DecodeGithubComRking788WarmindNetworkBungie(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Character) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson96521307DecodeGithubComRking788WarmindNetworkBungie(l, v)
}
func easyjson96521307Decode(in *jlexer.Lexer, out *struct {
	Level int `json:"level"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "level":
			out.Level = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson96521307Encode(out *jwriter.Writer, in struct {
	Level int `json:"level"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Level != 0 {
		const prefix string = ",\"level\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Level))
	}
	out.RawByte('}')
}
