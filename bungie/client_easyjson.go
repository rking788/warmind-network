// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package bungie

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie(in *jlexer.Lexer, out *ProfileUserInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "membershipType":
			out.MembershipType = int(in.Int())
		case "membershipId":
			out.MembershipID = string(in.String())
		case "displayName":
			out.DisplayName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie(out *jwriter.Writer, in ProfileUserInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MembershipType != 0 {
		const prefix string = ",\"membershipType\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.MembershipType))
	}
	if in.MembershipID != "" {
		const prefix string = ",\"membershipId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MembershipID))
	}
	if in.DisplayName != "" {
		const prefix string = ",\"displayName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DisplayName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfileUserInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfileUserInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfileUserInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfileUserInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie(l, v)
}
func easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie1(in *jlexer.Lexer, out *ProfilePayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(ProfileData)
				}
				(*out.Data).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie1(out *jwriter.Writer, in ProfilePayload) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Data != nil {
		const prefix string = ",\"data\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Data).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfilePayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfilePayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfilePayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfilePayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie1(l, v)
}
func easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie2(in *jlexer.Lexer, out *ProfileData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "dateLastPlayed":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateLastPlayed).UnmarshalJSON(data))
			}
		case "userInfo":
			if in.IsNull() {
				in.Skip()
				out.UserInfo = nil
			} else {
				if out.UserInfo == nil {
					out.UserInfo = new(ProfileUserInfo)
				}
				(*out.UserInfo).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie2(out *jwriter.Writer, in ProfileData) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"dateLastPlayed\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.DateLastPlayed).MarshalJSON())
	}
	if in.UserInfo != nil {
		const prefix string = ",\"userInfo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.UserInfo).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfileData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfileData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfileData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfileData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie2(l, v)
}
func easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie3(in *jlexer.Lexer, out *MilestoneProgression) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "milestoneHash":
			out.MilestoneHash = int(in.Int())
		case "startDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartDate).UnmarshalJSON(data))
			}
		case "endDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EndDate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie3(out *jwriter.Writer, in MilestoneProgression) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MilestoneHash != 0 {
		const prefix string = ",\"milestoneHash\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.MilestoneHash))
	}
	if true {
		const prefix string = ",\"startDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.StartDate).MarshalJSON())
	}
	if true {
		const prefix string = ",\"endDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.EndDate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MilestoneProgression) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MilestoneProgression) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MilestoneProgression) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MilestoneProgression) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie3(l, v)
}
func easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie4(in *jlexer.Lexer, out *LinkedProfilesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.BaseResponse = new(BaseResponse)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Response":
			if in.IsNull() {
				in.Skip()
				out.Response = nil
			} else {
				if out.Response == nil {
					out.Response = new(struct {
						Profiles      []*Profile     `json:"profiles"`
						BungieNetUser *BungieNetUser `json:"bnetMembership"`
					})
				}
				easyjsonC0e5e3f1Decode(in, out.Response)
			}
		case "ErrorCode":
			out.ErrorCode = int(in.Int())
		case "ThrottleSeconds":
			out.ThrottleSeconds = int(in.Int())
		case "ErrorStatus":
			out.ErrorStatus = string(in.String())
		case "Message":
			out.Message = string(in.String())
		case "MessageData":
			if m, ok := out.MessageData.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MessageData.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MessageData = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie4(out *jwriter.Writer, in LinkedProfilesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Response != nil {
		const prefix string = ",\"Response\":"
		first = false
		out.RawString(prefix[1:])
		easyjsonC0e5e3f1Encode(out, *in.Response)
	}
	if in.ErrorCode != 0 {
		const prefix string = ",\"ErrorCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ErrorCode))
	}
	if in.ThrottleSeconds != 0 {
		const prefix string = ",\"ThrottleSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ThrottleSeconds))
	}
	if in.ErrorStatus != "" {
		const prefix string = ",\"ErrorStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ErrorStatus))
	}
	if in.Message != "" {
		const prefix string = ",\"Message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	if in.MessageData != nil {
		const prefix string = ",\"MessageData\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.MessageData.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MessageData.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MessageData))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LinkedProfilesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LinkedProfilesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LinkedProfilesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LinkedProfilesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie4(l, v)
}
func easyjsonC0e5e3f1Decode(in *jlexer.Lexer, out *struct {
	Profiles      []*Profile     `json:"profiles"`
	BungieNetUser *BungieNetUser `json:"bnetMembership"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "profiles":
			if in.IsNull() {
				in.Skip()
				out.Profiles = nil
			} else {
				in.Delim('[')
				if out.Profiles == nil {
					if !in.IsDelim(']') {
						out.Profiles = make([]*Profile, 0, 8)
					} else {
						out.Profiles = []*Profile{}
					}
				} else {
					out.Profiles = (out.Profiles)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Profile
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Profile)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Profiles = append(out.Profiles, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bnetMembership":
			if in.IsNull() {
				in.Skip()
				out.BungieNetUser = nil
			} else {
				if out.BungieNetUser == nil {
					out.BungieNetUser = new(BungieNetUser)
				}
				(*out.BungieNetUser).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1Encode(out *jwriter.Writer, in struct {
	Profiles      []*Profile     `json:"profiles"`
	BungieNetUser *BungieNetUser `json:"bnetMembership"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Profiles) != 0 {
		const prefix string = ",\"profiles\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v2, v3 := range in.Profiles {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.BungieNetUser != nil {
		const prefix string = ",\"bnetMembership\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BungieNetUser).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie5(in *jlexer.Lexer, out *ItemListPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(ItemListData)
				}
				(*out.Data).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie5(out *jwriter.Writer, in ItemListPayload) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Data != nil {
		const prefix string = ",\"data\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Data).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ItemListPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ItemListPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ItemListPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ItemListPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie5(l, v)
}
func easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie6(in *jlexer.Lexer, out *ItemListData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make(ItemList, 0, 8)
					} else {
						out.Items = ItemList{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *Item
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(Item)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Items = append(out.Items, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie6(out *jwriter.Writer, in ItemListData) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v5, v6 := range in.Items {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ItemListData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ItemListData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ItemListData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ItemListData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie6(l, v)
}
func easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie7(in *jlexer.Lexer, out *ItemInstanceData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Data = make(map[string]*ItemInstance)
				} else {
					out.Data = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v7 *ItemInstance
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(ItemInstance)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					(out.Data)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie7(out *jwriter.Writer, in ItemInstanceData) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.Data {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				if v8Value == nil {
					out.RawString("null")
				} else {
					(*v8Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ItemInstanceData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ItemInstanceData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ItemInstanceData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ItemInstanceData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie7(l, v)
}
func easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie8(in *jlexer.Lexer, out *ItemComponents) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "instances":
			if in.IsNull() {
				in.Skip()
				out.Instances = nil
			} else {
				if out.Instances == nil {
					out.Instances = new(ItemInstanceData)
				}
				(*out.Instances).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie8(out *jwriter.Writer, in ItemComponents) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Instances != nil {
		const prefix string = ",\"instances\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Instances).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ItemComponents) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ItemComponents) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ItemComponents) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ItemComponents) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie8(l, v)
}
func easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie9(in *jlexer.Lexer, out *GetProfileResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.BaseResponse = new(BaseResponse)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Response":
			if in.IsNull() {
				in.Skip()
				out.Response = nil
			} else {
				if out.Response == nil {
					out.Response = new(GetProfilePayload)
				}
				(*out.Response).UnmarshalEasyJSON(in)
			}
		case "ErrorCode":
			out.ErrorCode = int(in.Int())
		case "ThrottleSeconds":
			out.ThrottleSeconds = int(in.Int())
		case "ErrorStatus":
			out.ErrorStatus = string(in.String())
		case "Message":
			out.Message = string(in.String())
		case "MessageData":
			if m, ok := out.MessageData.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MessageData.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MessageData = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie9(out *jwriter.Writer, in GetProfileResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Response != nil {
		const prefix string = ",\"Response\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Response).MarshalEasyJSON(out)
	}
	if in.ErrorCode != 0 {
		const prefix string = ",\"ErrorCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ErrorCode))
	}
	if in.ThrottleSeconds != 0 {
		const prefix string = ",\"ThrottleSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ThrottleSeconds))
	}
	if in.ErrorStatus != "" {
		const prefix string = ",\"ErrorStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ErrorStatus))
	}
	if in.Message != "" {
		const prefix string = ",\"Message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	if in.MessageData != nil {
		const prefix string = ",\"MessageData\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.MessageData.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MessageData.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MessageData))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetProfileResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetProfileResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetProfileResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetProfileResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie9(l, v)
}
func easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie10(in *jlexer.Lexer, out *GetProfilePayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "characterInventories":
			if in.IsNull() {
				in.Skip()
				out.CharacterInventories = nil
			} else {
				if out.CharacterInventories == nil {
					out.CharacterInventories = new(CharacterMappedItemListPayload)
				}
				(*out.CharacterInventories).UnmarshalEasyJSON(in)
			}
		case "characterEquipment":
			if in.IsNull() {
				in.Skip()
				out.CharacterEquipment = nil
			} else {
				if out.CharacterEquipment == nil {
					out.CharacterEquipment = new(CharacterMappedItemListPayload)
				}
				(*out.CharacterEquipment).UnmarshalEasyJSON(in)
			}
		case "profileInventory":
			if in.IsNull() {
				in.Skip()
				out.ProfileInventory = nil
			} else {
				if out.ProfileInventory == nil {
					out.ProfileInventory = new(ItemListPayload)
				}
				(*out.ProfileInventory).UnmarshalEasyJSON(in)
			}
		case "profileCurrencies":
			if in.IsNull() {
				in.Skip()
				out.ProfileCurrencies = nil
			} else {
				if out.ProfileCurrencies == nil {
					out.ProfileCurrencies = new(ItemListPayload)
				}
				(*out.ProfileCurrencies).UnmarshalEasyJSON(in)
			}
		case "itemComponents":
			if in.IsNull() {
				in.Skip()
				out.ItemComponents = nil
			} else {
				if out.ItemComponents == nil {
					out.ItemComponents = new(ItemComponents)
				}
				(*out.ItemComponents).UnmarshalEasyJSON(in)
			}
		case "profile":
			if in.IsNull() {
				in.Skip()
				out.Profile = nil
			} else {
				if out.Profile == nil {
					out.Profile = new(ProfilePayload)
				}
				(*out.Profile).UnmarshalEasyJSON(in)
			}
		case "characters":
			if in.IsNull() {
				in.Skip()
				out.Characters = nil
			} else {
				if out.Characters == nil {
					out.Characters = new(CharacterData)
				}
				(*out.Characters).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie10(out *jwriter.Writer, in GetProfilePayload) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CharacterInventories != nil {
		const prefix string = ",\"characterInventories\":"
		first = false
		out.RawString(prefix[1:])
		(*in.CharacterInventories).MarshalEasyJSON(out)
	}
	if in.CharacterEquipment != nil {
		const prefix string = ",\"characterEquipment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CharacterEquipment).MarshalEasyJSON(out)
	}
	if in.ProfileInventory != nil {
		const prefix string = ",\"profileInventory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ProfileInventory).MarshalEasyJSON(out)
	}
	if in.ProfileCurrencies != nil {
		const prefix string = ",\"profileCurrencies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ProfileCurrencies).MarshalEasyJSON(out)
	}
	if in.ItemComponents != nil {
		const prefix string = ",\"itemComponents\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ItemComponents).MarshalEasyJSON(out)
	}
	if in.Profile != nil {
		const prefix string = ",\"profile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Profile).MarshalEasyJSON(out)
	}
	if in.Characters != nil {
		const prefix string = ",\"characters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Characters).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetProfilePayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetProfilePayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetProfilePayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetProfilePayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie10(l, v)
}
func easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie11(in *jlexer.Lexer, out *FactionProgression) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.BaseProgression = new(BaseProgression)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "factionHash":
			out.FactionHash = int(in.Int())
		case "factionVendorIndex":
			out.FactionVendorIndex = int(in.Int())
		case "progressionHash":
			out.ProgressionHash = int(in.Int())
		case "dailyProgress":
			out.DailyProgress = int(in.Int())
		case "dailyLimit":
			out.DailyLimit = int(in.Int())
		case "weeklyProgress":
			out.WeeklyProgress = int(in.Int())
		case "weeklyLimit":
			out.WeeklyLimit = int(in.Int())
		case "currentProgress":
			out.CurrentProgress = int(in.Int())
		case "level":
			out.Level = int(in.Int())
		case "levelCap":
			out.LevelCap = int(in.Int())
		case "stepIndex":
			out.StepIndex = int(in.Int())
		case "progressToNextLevel":
			out.ProgressToNextLevel = int(in.Int())
		case "nextLevelAt":
			out.NextLevelAt = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie11(out *jwriter.Writer, in FactionProgression) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FactionHash != 0 {
		const prefix string = ",\"factionHash\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.FactionHash))
	}
	if in.FactionVendorIndex != 0 {
		const prefix string = ",\"factionVendorIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FactionVendorIndex))
	}
	if in.ProgressionHash != 0 {
		const prefix string = ",\"progressionHash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ProgressionHash))
	}
	if in.DailyProgress != 0 {
		const prefix string = ",\"dailyProgress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.DailyProgress))
	}
	if in.DailyLimit != 0 {
		const prefix string = ",\"dailyLimit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.DailyLimit))
	}
	if in.WeeklyProgress != 0 {
		const prefix string = ",\"weeklyProgress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.WeeklyProgress))
	}
	if in.WeeklyLimit != 0 {
		const prefix string = ",\"weeklyLimit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.WeeklyLimit))
	}
	if in.CurrentProgress != 0 {
		const prefix string = ",\"currentProgress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CurrentProgress))
	}
	if in.Level != 0 {
		const prefix string = ",\"level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Level))
	}
	if in.LevelCap != 0 {
		const prefix string = ",\"levelCap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LevelCap))
	}
	if in.StepIndex != 0 {
		const prefix string = ",\"stepIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.StepIndex))
	}
	if in.ProgressToNextLevel != 0 {
		const prefix string = ",\"progressToNextLevel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ProgressToNextLevel))
	}
	if in.NextLevelAt != 0 {
		const prefix string = ",\"nextLevelAt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NextLevelAt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FactionProgression) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FactionProgression) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FactionProgression) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FactionProgression) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie11(l, v)
}
func easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie12(in *jlexer.Lexer, out *DestinyProgression) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.BaseProgression = new(BaseProgression)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "progressionHash":
			out.ProgressionHash = int(in.Int())
		case "dailyProgress":
			out.DailyProgress = int(in.Int())
		case "dailyLimit":
			out.DailyLimit = int(in.Int())
		case "weeklyProgress":
			out.WeeklyProgress = int(in.Int())
		case "weeklyLimit":
			out.WeeklyLimit = int(in.Int())
		case "currentProgress":
			out.CurrentProgress = int(in.Int())
		case "level":
			out.Level = int(in.Int())
		case "levelCap":
			out.LevelCap = int(in.Int())
		case "stepIndex":
			out.StepIndex = int(in.Int())
		case "progressToNextLevel":
			out.ProgressToNextLevel = int(in.Int())
		case "nextLevelAt":
			out.NextLevelAt = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie12(out *jwriter.Writer, in DestinyProgression) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ProgressionHash != 0 {
		const prefix string = ",\"progressionHash\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ProgressionHash))
	}
	if in.DailyProgress != 0 {
		const prefix string = ",\"dailyProgress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.DailyProgress))
	}
	if in.DailyLimit != 0 {
		const prefix string = ",\"dailyLimit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.DailyLimit))
	}
	if in.WeeklyProgress != 0 {
		const prefix string = ",\"weeklyProgress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.WeeklyProgress))
	}
	if in.WeeklyLimit != 0 {
		const prefix string = ",\"weeklyLimit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.WeeklyLimit))
	}
	if in.CurrentProgress != 0 {
		const prefix string = ",\"currentProgress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CurrentProgress))
	}
	if in.Level != 0 {
		const prefix string = ",\"level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Level))
	}
	if in.LevelCap != 0 {
		const prefix string = ",\"levelCap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LevelCap))
	}
	if in.StepIndex != 0 {
		const prefix string = ",\"stepIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.StepIndex))
	}
	if in.ProgressToNextLevel != 0 {
		const prefix string = ",\"progressToNextLevel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ProgressToNextLevel))
	}
	if in.NextLevelAt != 0 {
		const prefix string = ",\"nextLevelAt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NextLevelAt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DestinyProgression) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DestinyProgression) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DestinyProgression) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DestinyProgression) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie12(l, v)
}
func easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie13(in *jlexer.Lexer, out *DestinyMembership) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "displayName":
			out.DisplayName = string(in.String())
		case "membershipType":
			out.MembershipType = int(in.Int())
		case "membershipId":
			out.MembershipID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie13(out *jwriter.Writer, in DestinyMembership) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DisplayName != "" {
		const prefix string = ",\"displayName\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.DisplayName))
	}
	if in.MembershipType != 0 {
		const prefix string = ",\"membershipType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MembershipType))
	}
	if in.MembershipID != "" {
		const prefix string = ",\"membershipId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MembershipID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DestinyMembership) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DestinyMembership) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DestinyMembership) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DestinyMembership) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie13(l, v)
}
func easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie14(in *jlexer.Lexer, out *CurrentUserMembershipsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.BaseResponse = new(BaseResponse)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Response":
			if in.IsNull() {
				in.Skip()
				out.Response = nil
			} else {
				if out.Response == nil {
					out.Response = new(struct {
						DestinyMemberships []*DestinyMembership `json:"destinyMemberships"`
						BungieNetUser      *BungieNetUser       `json:"bungieNetUser"`
					})
				}
				easyjsonC0e5e3f1Decode1(in, out.Response)
			}
		case "ErrorCode":
			out.ErrorCode = int(in.Int())
		case "ThrottleSeconds":
			out.ThrottleSeconds = int(in.Int())
		case "ErrorStatus":
			out.ErrorStatus = string(in.String())
		case "Message":
			out.Message = string(in.String())
		case "MessageData":
			if m, ok := out.MessageData.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MessageData.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MessageData = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie14(out *jwriter.Writer, in CurrentUserMembershipsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Response != nil {
		const prefix string = ",\"Response\":"
		first = false
		out.RawString(prefix[1:])
		easyjsonC0e5e3f1Encode1(out, *in.Response)
	}
	if in.ErrorCode != 0 {
		const prefix string = ",\"ErrorCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ErrorCode))
	}
	if in.ThrottleSeconds != 0 {
		const prefix string = ",\"ThrottleSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ThrottleSeconds))
	}
	if in.ErrorStatus != "" {
		const prefix string = ",\"ErrorStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ErrorStatus))
	}
	if in.Message != "" {
		const prefix string = ",\"Message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	if in.MessageData != nil {
		const prefix string = ",\"MessageData\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.MessageData.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MessageData.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MessageData))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CurrentUserMembershipsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CurrentUserMembershipsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CurrentUserMembershipsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CurrentUserMembershipsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie14(l, v)
}
func easyjsonC0e5e3f1Decode1(in *jlexer.Lexer, out *struct {
	DestinyMemberships []*DestinyMembership `json:"destinyMemberships"`
	BungieNetUser      *BungieNetUser       `json:"bungieNetUser"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "destinyMemberships":
			if in.IsNull() {
				in.Skip()
				out.DestinyMemberships = nil
			} else {
				in.Delim('[')
				if out.DestinyMemberships == nil {
					if !in.IsDelim(']') {
						out.DestinyMemberships = make([]*DestinyMembership, 0, 8)
					} else {
						out.DestinyMemberships = []*DestinyMembership{}
					}
				} else {
					out.DestinyMemberships = (out.DestinyMemberships)[:0]
				}
				for !in.IsDelim(']') {
					var v9 *DestinyMembership
					if in.IsNull() {
						in.Skip()
						v9 = nil
					} else {
						if v9 == nil {
							v9 = new(DestinyMembership)
						}
						(*v9).UnmarshalEasyJSON(in)
					}
					out.DestinyMemberships = append(out.DestinyMemberships, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bungieNetUser":
			if in.IsNull() {
				in.Skip()
				out.BungieNetUser = nil
			} else {
				if out.BungieNetUser == nil {
					out.BungieNetUser = new(BungieNetUser)
				}
				(*out.BungieNetUser).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1Encode1(out *jwriter.Writer, in struct {
	DestinyMemberships []*DestinyMembership `json:"destinyMemberships"`
	BungieNetUser      *BungieNetUser       `json:"bungieNetUser"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.DestinyMemberships) != 0 {
		const prefix string = ",\"destinyMemberships\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v10, v11 := range in.DestinyMemberships {
				if v10 > 0 {
					out.RawByte(',')
				}
				if v11 == nil {
					out.RawString("null")
				} else {
					(*v11).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.BungieNetUser != nil {
		const prefix string = ",\"bungieNetUser\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.BungieNetUser).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie15(in *jlexer.Lexer, out *CurrentUserMemberships) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "BungieNetUser":
			if in.IsNull() {
				in.Skip()
				out.BungieNetUser = nil
			} else {
				if out.BungieNetUser == nil {
					out.BungieNetUser = new(BungieNetUser)
				}
				(*out.BungieNetUser).UnmarshalEasyJSON(in)
			}
		case "DestinyMembership":
			if in.IsNull() {
				in.Skip()
				out.DestinyMembership = nil
			} else {
				if out.DestinyMembership == nil {
					out.DestinyMembership = new(DestinyMembership)
				}
				(*out.DestinyMembership).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie15(out *jwriter.Writer, in CurrentUserMemberships) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BungieNetUser != nil {
		const prefix string = ",\"BungieNetUser\":"
		first = false
		out.RawString(prefix[1:])
		(*in.BungieNetUser).MarshalEasyJSON(out)
	}
	if in.DestinyMembership != nil {
		const prefix string = ",\"DestinyMembership\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DestinyMembership).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CurrentUserMemberships) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CurrentUserMemberships) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CurrentUserMemberships) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CurrentUserMemberships) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie15(l, v)
}
func easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie16(in *jlexer.Lexer, out *CharacterProgressionResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.BaseResponse = new(BaseResponse)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Response":
			if in.IsNull() {
				in.Skip()
				out.Response = nil
			} else {
				if out.Response == nil {
					out.Response = new(struct {
						CharacterProgressions *struct {
							Data map[string]*CharacterProgression `json:"data"`
						} `json:"characterProgressions"`
					})
				}
				easyjsonC0e5e3f1Decode2(in, out.Response)
			}
		case "ErrorCode":
			out.ErrorCode = int(in.Int())
		case "ThrottleSeconds":
			out.ThrottleSeconds = int(in.Int())
		case "ErrorStatus":
			out.ErrorStatus = string(in.String())
		case "Message":
			out.Message = string(in.String())
		case "MessageData":
			if m, ok := out.MessageData.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MessageData.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MessageData = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie16(out *jwriter.Writer, in CharacterProgressionResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Response != nil {
		const prefix string = ",\"Response\":"
		first = false
		out.RawString(prefix[1:])
		easyjsonC0e5e3f1Encode2(out, *in.Response)
	}
	if in.ErrorCode != 0 {
		const prefix string = ",\"ErrorCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ErrorCode))
	}
	if in.ThrottleSeconds != 0 {
		const prefix string = ",\"ThrottleSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ThrottleSeconds))
	}
	if in.ErrorStatus != "" {
		const prefix string = ",\"ErrorStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ErrorStatus))
	}
	if in.Message != "" {
		const prefix string = ",\"Message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	if in.MessageData != nil {
		const prefix string = ",\"MessageData\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.MessageData.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MessageData.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MessageData))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CharacterProgressionResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CharacterProgressionResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CharacterProgressionResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CharacterProgressionResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie16(l, v)
}
func easyjsonC0e5e3f1Decode2(in *jlexer.Lexer, out *struct {
	CharacterProgressions *struct {
		Data map[string]*CharacterProgression `json:"data"`
	} `json:"characterProgressions"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "characterProgressions":
			if in.IsNull() {
				in.Skip()
				out.CharacterProgressions = nil
			} else {
				if out.CharacterProgressions == nil {
					out.CharacterProgressions = new(struct {
						Data map[string]*CharacterProgression `json:"data"`
					})
				}
				easyjsonC0e5e3f1Decode3(in, out.CharacterProgressions)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1Encode2(out *jwriter.Writer, in struct {
	CharacterProgressions *struct {
		Data map[string]*CharacterProgression `json:"data"`
	} `json:"characterProgressions"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CharacterProgressions != nil {
		const prefix string = ",\"characterProgressions\":"
		first = false
		out.RawString(prefix[1:])
		easyjsonC0e5e3f1Encode3(out, *in.CharacterProgressions)
	}
	out.RawByte('}')
}
func easyjsonC0e5e3f1Decode3(in *jlexer.Lexer, out *struct {
	Data map[string]*CharacterProgression `json:"data"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Data = make(map[string]*CharacterProgression)
				} else {
					out.Data = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v12 *CharacterProgression
					if in.IsNull() {
						in.Skip()
						v12 = nil
					} else {
						if v12 == nil {
							v12 = new(CharacterProgression)
						}
						(*v12).UnmarshalEasyJSON(in)
					}
					(out.Data)[key] = v12
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1Encode3(out *jwriter.Writer, in struct {
	Data map[string]*CharacterProgression `json:"data"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v13First := true
			for v13Name, v13Value := range in.Data {
				if v13First {
					v13First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v13Name))
				out.RawByte(':')
				if v13Value == nil {
					out.RawString("null")
				} else {
					(*v13Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie17(in *jlexer.Lexer, out *CharacterProgression) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "progressions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Progressions = make(map[string]*DestinyProgression)
				} else {
					out.Progressions = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v14 *DestinyProgression
					if in.IsNull() {
						in.Skip()
						v14 = nil
					} else {
						if v14 == nil {
							v14 = new(DestinyProgression)
						}
						(*v14).UnmarshalEasyJSON(in)
					}
					(out.Progressions)[key] = v14
					in.WantComma()
				}
				in.Delim('}')
			}
		case "factions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Factions = make(map[string]*FactionProgression)
				} else {
					out.Factions = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v15 *FactionProgression
					if in.IsNull() {
						in.Skip()
						v15 = nil
					} else {
						if v15 == nil {
							v15 = new(FactionProgression)
						}
						(*v15).UnmarshalEasyJSON(in)
					}
					(out.Factions)[key] = v15
					in.WantComma()
				}
				in.Delim('}')
			}
		case "milestones":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Milestones = make(map[string]*MilestoneProgression)
				} else {
					out.Milestones = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v16 *MilestoneProgression
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						if v16 == nil {
							v16 = new(MilestoneProgression)
						}
						(*v16).UnmarshalEasyJSON(in)
					}
					(out.Milestones)[key] = v16
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie17(out *jwriter.Writer, in CharacterProgression) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Progressions) != 0 {
		const prefix string = ",\"progressions\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v17First := true
			for v17Name, v17Value := range in.Progressions {
				if v17First {
					v17First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v17Name))
				out.RawByte(':')
				if v17Value == nil {
					out.RawString("null")
				} else {
					(*v17Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Factions) != 0 {
		const prefix string = ",\"factions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v18First := true
			for v18Name, v18Value := range in.Factions {
				if v18First {
					v18First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v18Name))
				out.RawByte(':')
				if v18Value == nil {
					out.RawString("null")
				} else {
					(*v18Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Milestones) != 0 {
		const prefix string = ",\"milestones\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v19First := true
			for v19Name, v19Value := range in.Milestones {
				if v19First {
					v19First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v19Name))
				out.RawByte(':')
				if v19Value == nil {
					out.RawString("null")
				} else {
					(*v19Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CharacterProgression) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CharacterProgression) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CharacterProgression) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CharacterProgression) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie17(l, v)
}
func easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie18(in *jlexer.Lexer, out *CharacterMappedItemListPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Data = make(map[string]*CharacterMappedItemListData)
				} else {
					out.Data = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v20 *CharacterMappedItemListData
					if in.IsNull() {
						in.Skip()
						v20 = nil
					} else {
						if v20 == nil {
							v20 = new(CharacterMappedItemListData)
						}
						(*v20).UnmarshalEasyJSON(in)
					}
					(out.Data)[key] = v20
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie18(out *jwriter.Writer, in CharacterMappedItemListPayload) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v21First := true
			for v21Name, v21Value := range in.Data {
				if v21First {
					v21First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v21Name))
				out.RawByte(':')
				if v21Value == nil {
					out.RawString("null")
				} else {
					(*v21Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CharacterMappedItemListPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CharacterMappedItemListPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CharacterMappedItemListPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CharacterMappedItemListPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie18(l, v)
}
func easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie19(in *jlexer.Lexer, out *CharacterMappedItemListData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make(ItemList, 0, 8)
					} else {
						out.Items = ItemList{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v22 *Item
					if in.IsNull() {
						in.Skip()
						v22 = nil
					} else {
						if v22 == nil {
							v22 = new(Item)
						}
						(*v22).UnmarshalEasyJSON(in)
					}
					out.Items = append(out.Items, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie19(out *jwriter.Writer, in CharacterMappedItemListData) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v23, v24 := range in.Items {
				if v23 > 0 {
					out.RawByte(',')
				}
				if v24 == nil {
					out.RawString("null")
				} else {
					(*v24).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CharacterMappedItemListData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CharacterMappedItemListData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CharacterMappedItemListData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CharacterMappedItemListData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie19(l, v)
}
func easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie20(in *jlexer.Lexer, out *CharacterData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Data = make(CharacterMap)
				} else {
					out.Data = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v25 *Character
					if in.IsNull() {
						in.Skip()
						v25 = nil
					} else {
						if v25 == nil {
							v25 = new(Character)
						}
						(*v25).UnmarshalEasyJSON(in)
					}
					(out.Data)[key] = v25
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie20(out *jwriter.Writer, in CharacterData) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v26First := true
			for v26Name, v26Value := range in.Data {
				if v26First {
					v26First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v26Name))
				out.RawByte(':')
				if v26Value == nil {
					out.RawString("null")
				} else {
					(*v26Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CharacterData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CharacterData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CharacterData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CharacterData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie20(l, v)
}
func easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie21(in *jlexer.Lexer, out *BungieNetUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "membershipId":
			out.MembershipID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie21(out *jwriter.Writer, in BungieNetUser) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MembershipID != "" {
		const prefix string = ",\"membershipId\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MembershipID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BungieNetUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BungieNetUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BungieNetUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BungieNetUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie21(l, v)
}
func easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie22(in *jlexer.Lexer, out *BaseResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ErrorCode":
			out.ErrorCode = int(in.Int())
		case "ThrottleSeconds":
			out.ThrottleSeconds = int(in.Int())
		case "ErrorStatus":
			out.ErrorStatus = string(in.String())
		case "Message":
			out.Message = string(in.String())
		case "MessageData":
			if m, ok := out.MessageData.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MessageData.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MessageData = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie22(out *jwriter.Writer, in BaseResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ErrorCode != 0 {
		const prefix string = ",\"ErrorCode\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ErrorCode))
	}
	if in.ThrottleSeconds != 0 {
		const prefix string = ",\"ThrottleSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ThrottleSeconds))
	}
	if in.ErrorStatus != "" {
		const prefix string = ",\"ErrorStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ErrorStatus))
	}
	if in.Message != "" {
		const prefix string = ",\"Message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	if in.MessageData != nil {
		const prefix string = ",\"MessageData\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.MessageData.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MessageData.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MessageData))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BaseResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BaseResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BaseResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BaseResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie22(l, v)
}
func easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie23(in *jlexer.Lexer, out *BaseProgression) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "progressionHash":
			out.ProgressionHash = int(in.Int())
		case "dailyProgress":
			out.DailyProgress = int(in.Int())
		case "dailyLimit":
			out.DailyLimit = int(in.Int())
		case "weeklyProgress":
			out.WeeklyProgress = int(in.Int())
		case "weeklyLimit":
			out.WeeklyLimit = int(in.Int())
		case "currentProgress":
			out.CurrentProgress = int(in.Int())
		case "level":
			out.Level = int(in.Int())
		case "levelCap":
			out.LevelCap = int(in.Int())
		case "stepIndex":
			out.StepIndex = int(in.Int())
		case "progressToNextLevel":
			out.ProgressToNextLevel = int(in.Int())
		case "nextLevelAt":
			out.NextLevelAt = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie23(out *jwriter.Writer, in BaseProgression) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ProgressionHash != 0 {
		const prefix string = ",\"progressionHash\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ProgressionHash))
	}
	if in.DailyProgress != 0 {
		const prefix string = ",\"dailyProgress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.DailyProgress))
	}
	if in.DailyLimit != 0 {
		const prefix string = ",\"dailyLimit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.DailyLimit))
	}
	if in.WeeklyProgress != 0 {
		const prefix string = ",\"weeklyProgress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.WeeklyProgress))
	}
	if in.WeeklyLimit != 0 {
		const prefix string = ",\"weeklyLimit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.WeeklyLimit))
	}
	if in.CurrentProgress != 0 {
		const prefix string = ",\"currentProgress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CurrentProgress))
	}
	if in.Level != 0 {
		const prefix string = ",\"level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Level))
	}
	if in.LevelCap != 0 {
		const prefix string = ",\"levelCap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LevelCap))
	}
	if in.StepIndex != 0 {
		const prefix string = ",\"stepIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.StepIndex))
	}
	if in.ProgressToNextLevel != 0 {
		const prefix string = ",\"progressToNextLevel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ProgressToNextLevel))
	}
	if in.NextLevelAt != 0 {
		const prefix string = ",\"nextLevelAt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NextLevelAt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BaseProgression) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BaseProgression) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeGithubComRking788WarmindNetworkBungie23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BaseProgression) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BaseProgression) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeGithubComRking788WarmindNetworkBungie23(l, v)
}
